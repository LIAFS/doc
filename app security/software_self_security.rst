=========================== 
软件自身安全检测
=========================== 


软件配置安全
--------------

* 检测内容：检测APP（只针对Android）是否关闭应用调试、数据备份等相关功能。

* 检测方法：

 1.反编译被测APP，提取出APP中的AndroidManifest.xml文件。

 2.查看AndroidManifest.xml中是否有设置android:allowBackup="true"和android:debugAble="true"。

* 解决方案：

 1.在AndroidManifest.xml 配置文件中设置android:allowBackup="false"。

 2.在AndroidManifest.xml 配置文件中设置android:debugAble="false"。

软件代码安全检测
-----------------

* 检测内容：

 1.对代码混淆、Dex保护、SO保护、资源文件保护以及第三方加载库的代码的安全处理进行检测分析，发现代码被反编译和破解的漏洞。

 2.检测软件程序中是否包含有敏感URL，硬编码的密钥，手机号码和邮箱地址等敏感信息。

 3.查看反编译回来的程序代码，查看代码中是否暴露有公开的漏洞。

* 检测方法：

 1.反编译被测APP，如果反编译成功，查看其代码是否有进行混淆，查看被测APP代码中是否泄漏有重要业务逻辑（加密解密算法）和敏感信息。

 2.如果不能对被测APP代码进行反编译，则分析其用了哪一家的加固方案。

* 解决方案：

 1.对APP进行代码混淆处理。

 2.对APP进行加固处理，防止被反编译。

重打包检测
-----------------

* 检测内容：

 对APK反编译后的内容进行重打包和签名，看是否可以进行重打包。

* 检测方法：

 1.通过Androidkiller对APK反编译后的内容进行重打包和签名，看是否可以进行重打包。

 2.如果能够重打包，便对重打包后的APP进行安装，检测此APP是否能够正常运行。

* 解决方案：

 对APP进行加固处理，防止被反编译进而重打包。


组件安全检测
-----------------

* 检测内容：

 检测被测APP是否有Activity、Broadcast Receiver、Service、Provider可导出。

* 检测方法：

 使用drozer进行组件导出检测（详细见检测工具）。

* 解决方案：

 修改配置文件AndroidManifest.xml，尽量让Activity、Broadcast、Receivers、Service等组件的Exported属性为Flase。

软件运行日志检测
-----------------

* 检测内容：

 检测客户端软件的运行日志是否输出有用户名、手机号、密钥等敏感信息输出。

* 检测方法：

 使用DDMS监听输出APP操作过程的日志信息。

* 解决方案：

 建议发布版去掉log信息。
